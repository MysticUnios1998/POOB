#BlueJ class context
comment0.target=Trap
comment0.text=\r\n\ Clase\ que\ encapsular\u00E1\ la\ informaci\u00F3n\ relacionada\ con\ las\ lonas\ en\ el\ \r\n\ simulador.\ Ofrecer\u00E1\ los\ servicios\ de\ estructura\ b\u00E1sica\ y\ dibujado\ en\ Canvas.\ \r\n\r\n\ @author\ Eduard\ Arias,\ Juan\ D\u00EDaz\r\n\ @version\ 2.0\ (2019-08-28)\r\n
comment1.params=start\ end
comment1.target=Trap(int[],\ int[])
comment1.text=\r\n\ Constructor\ principal\ de\ la\ clase.\ Crea\ una\ l\u00EDnea\ a\ partir\ de\ \r\n\ coordenadas\ tipo\ (x,y).\r\n\ @param\ start\ array\ con\ las\ coordenadas\ del\ punto\ inicial.\r\n\ @param\ end\ array\ con\ las\ coordenadas\ del\ punto\ final.\r\n
comment10.params=
comment10.target=java.util.ArrayList\ getPunctures()
comment10.text=\r\n\ Retorna\ los\ puntos\ de\ los\ agujeros.\r\n\ @return\ ArrayList\ con\ los\ agujeros\ de\ la\ trampa.\r\n
comment11.params=x\ y
comment11.target=java.awt.geom.Point2D.Double\ holeNextTo(int,\ int)
comment11.text=\r\n\ Retorna\ el\ primer\ agujero\ que\ est\u00E9\ en\ unas\ coordenadas.\ Si\ no\ hay\ \r\n\ tal\ agujero,\ se\ retorna\ el\ punto\ con\ yMax.\r\n\ @param\ x\ coordenada\ horizontal.\r\n\ @param\ y\ coordenada\ vertical.\r\n\ @return\ punto\ 2D\ con\ el\ agujero\ dado\ las\ coordenadas.\r\n
comment12.params=t
comment12.target=void\ copyState(Trap)
comment12.text=\r\n\ Crea\ una\ copia\ de\ una\ trampa\ anterior.\r\n\ @param\ t\ trampa\ a\ clonar.\r\n
comment13.params=
comment13.target=boolean\ delete()
comment13.text=\r\n\ Elimina\ la\ trampa\ de\ pantalla\r\n\ @return\ si\ se\ pudo\ eliminar\ o\ no\r\n
comment14.params=
comment14.target=void\ draw()
comment15.params=
comment15.target=void\ erase()
comment2.params=
comment2.target=Trap()
comment2.text=\r\n\ Constructor\ por\ defecto\ de\ la\ clase.\ Crea\ una\ trampa\ en\ la\ posici\u00F3n\ (1,1)\ a\ la\ (1,2);\r\n
comment3.params=
comment3.target=void\ makeVisible()
comment4.params=
comment4.target=void\ makeInvisible()
comment5.params=x
comment5.target=void\ makePuncture(int)
comment5.text=\r\n\ Crea\ un\ nuevo\ agujero\ en\ esta\ trampa.\ \r\n\ @param\ x\ posici\u00F3n\ del\ agujero\ a\ lo\ largo\ de\ la\ trampa.\ Debe\ ser\ un\ \r\n\ entero\ mayor\ a\ 0.\r\n
comment6.params=pos
comment6.target=void\ patchPuncture(int)
comment6.text=\r\n\ Repara\ un\ agujero\ que\ tenga\ la\ trampa.\r\n\ @param\ la\ posici\u00F3n\ del\ agujero.\r\n
comment7.params=
comment7.target=java.awt.geom.Point2D.Double[]\ getLocation()
comment7.text=\r\n\ Retorna\ la\ ubicaci\u00F3n\ de\ este\ objeto.\r\n\ @return\ array\ con\ las\ coordenadas\ en\ forma\ de\ puntos.\ \r\n
comment8.params=
comment8.target=double\ getLength()
comment8.text=\r\n\ Retorna\ la\ longitud\ de\ la\ trampa.\r\n\ @return\ la\ longitud\ calculada\ como\ distancia\ pitag\u00F3tica\ entre\ los\ puntos\r\n
comment9.params=
comment9.target=int[]\ getPuncturesCoordinate()
comment9.text=\r\n\ Devuelve\ las\ coordenadas\ horizontales\ de\ los\ huecos.\r\n\ @return\ array\ con\ las\ coordenadas.\r\n
numComments=16
